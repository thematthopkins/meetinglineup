// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "pb.proto" (package "meetinglineup", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message meetinglineup.RoomEvent
 */
export interface RoomEvent {
    /**
     * @generated from protobuf oneof: Event
     */
    event: {
        oneofKind: "addUser";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.AddUser add_user = 1;
         */
        addUser: RoomEvent_AddUser;
    } | {
        oneofKind: "removeUser";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.RemoveUser remove_user = 2;
         */
        removeUser: RoomEvent_RemoveUser;
    } | {
        oneofKind: "reorderUser";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.ReorderUser reorder_user = 3;
         */
        reorderUser: RoomEvent_ReorderUser;
    } | {
        oneofKind: "updateUserName";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.UpdateUserName updateUserName = 4;
         */
        updateUserName: RoomEvent_UpdateUserName;
    } | {
        oneofKind: "updateRoomName";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.UpdateRoomName updateRoomName = 5;
         */
        updateRoomName: RoomEvent_UpdateRoomName;
    } | {
        oneofKind: "markUserAbsent";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.MarkUserAbsent markUserAbsent = 6;
         */
        markUserAbsent: RoomEvent_MarkUserAbsent;
    } | {
        oneofKind: "markUserPresent";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.MarkUserPresent markUserPresent = 7;
         */
        markUserPresent: RoomEvent_MarkUserPresent;
    } | {
        oneofKind: "undo";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.Undo undo = 8;
         */
        undo: RoomEvent_Undo;
    } | {
        oneofKind: "redo";
        /**
         * @generated from protobuf field: meetinglineup.RoomEvent.Redo redo = 9;
         */
        redo: RoomEvent_Redo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.AddUser
 */
export interface RoomEvent_AddUser {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double order = 3;
     */
    order: number;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.RemoveUser
 */
export interface RoomEvent_RemoveUser {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.ReorderUser
 */
export interface RoomEvent_ReorderUser {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: double order = 2;
     */
    order: number;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.UpdateUserName
 */
export interface RoomEvent_UpdateUserName {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.UpdateRoomName
 */
export interface RoomEvent_UpdateRoomName {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.MarkUserAbsent
 */
export interface RoomEvent_MarkUserAbsent {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.MarkUserPresent
 */
export interface RoomEvent_MarkUserPresent {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.Undo
 */
export interface RoomEvent_Undo {
    /**
     * @generated from protobuf field: string event_id = 1;
     */
    eventId: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEvent.Redo
 */
export interface RoomEvent_Redo {
    /**
     * @generated from protobuf field: string event_id = 1;
     */
    eventId: string;
}
/**
 * @generated from protobuf message meetinglineup.EventMetadata
 */
export interface EventMetadata {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: uint64 created_at = 2;
     */
    createdAt: bigint;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message meetinglineup.RoomEventWithMetadata
 */
export interface RoomEventWithMetadata {
    /**
     * @generated from protobuf field: meetinglineup.EventMetadata metadata = 1;
     */
    metadata?: EventMetadata;
    /**
     * @generated from protobuf field: meetinglineup.RoomEvent event = 2;
     */
    event?: RoomEvent;
}
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent$Type extends MessageType<RoomEvent> {
    constructor() {
        super("meetinglineup.RoomEvent", [
            { no: 1, name: "add_user", kind: "message", oneof: "event", T: () => RoomEvent_AddUser },
            { no: 2, name: "remove_user", kind: "message", oneof: "event", T: () => RoomEvent_RemoveUser },
            { no: 3, name: "reorder_user", kind: "message", oneof: "event", T: () => RoomEvent_ReorderUser },
            { no: 4, name: "updateUserName", kind: "message", oneof: "event", T: () => RoomEvent_UpdateUserName },
            { no: 5, name: "updateRoomName", kind: "message", oneof: "event", T: () => RoomEvent_UpdateRoomName },
            { no: 6, name: "markUserAbsent", kind: "message", oneof: "event", T: () => RoomEvent_MarkUserAbsent },
            { no: 7, name: "markUserPresent", kind: "message", oneof: "event", T: () => RoomEvent_MarkUserPresent },
            { no: 8, name: "undo", kind: "message", oneof: "event", T: () => RoomEvent_Undo },
            { no: 9, name: "redo", kind: "message", oneof: "event", T: () => RoomEvent_Redo }
        ]);
    }
    create(value?: PartialMessage<RoomEvent>): RoomEvent {
        const message = { event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent): RoomEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* meetinglineup.RoomEvent.AddUser add_user */ 1:
                    message.event = {
                        oneofKind: "addUser",
                        addUser: RoomEvent_AddUser.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).addUser)
                    };
                    break;
                case /* meetinglineup.RoomEvent.RemoveUser remove_user */ 2:
                    message.event = {
                        oneofKind: "removeUser",
                        removeUser: RoomEvent_RemoveUser.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).removeUser)
                    };
                    break;
                case /* meetinglineup.RoomEvent.ReorderUser reorder_user */ 3:
                    message.event = {
                        oneofKind: "reorderUser",
                        reorderUser: RoomEvent_ReorderUser.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).reorderUser)
                    };
                    break;
                case /* meetinglineup.RoomEvent.UpdateUserName updateUserName */ 4:
                    message.event = {
                        oneofKind: "updateUserName",
                        updateUserName: RoomEvent_UpdateUserName.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).updateUserName)
                    };
                    break;
                case /* meetinglineup.RoomEvent.UpdateRoomName updateRoomName */ 5:
                    message.event = {
                        oneofKind: "updateRoomName",
                        updateRoomName: RoomEvent_UpdateRoomName.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).updateRoomName)
                    };
                    break;
                case /* meetinglineup.RoomEvent.MarkUserAbsent markUserAbsent */ 6:
                    message.event = {
                        oneofKind: "markUserAbsent",
                        markUserAbsent: RoomEvent_MarkUserAbsent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).markUserAbsent)
                    };
                    break;
                case /* meetinglineup.RoomEvent.MarkUserPresent markUserPresent */ 7:
                    message.event = {
                        oneofKind: "markUserPresent",
                        markUserPresent: RoomEvent_MarkUserPresent.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).markUserPresent)
                    };
                    break;
                case /* meetinglineup.RoomEvent.Undo undo */ 8:
                    message.event = {
                        oneofKind: "undo",
                        undo: RoomEvent_Undo.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).undo)
                    };
                    break;
                case /* meetinglineup.RoomEvent.Redo redo */ 9:
                    message.event = {
                        oneofKind: "redo",
                        redo: RoomEvent_Redo.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).redo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* meetinglineup.RoomEvent.AddUser add_user = 1; */
        if (message.event.oneofKind === "addUser")
            RoomEvent_AddUser.internalBinaryWrite(message.event.addUser, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.RemoveUser remove_user = 2; */
        if (message.event.oneofKind === "removeUser")
            RoomEvent_RemoveUser.internalBinaryWrite(message.event.removeUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.ReorderUser reorder_user = 3; */
        if (message.event.oneofKind === "reorderUser")
            RoomEvent_ReorderUser.internalBinaryWrite(message.event.reorderUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.UpdateUserName updateUserName = 4; */
        if (message.event.oneofKind === "updateUserName")
            RoomEvent_UpdateUserName.internalBinaryWrite(message.event.updateUserName, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.UpdateRoomName updateRoomName = 5; */
        if (message.event.oneofKind === "updateRoomName")
            RoomEvent_UpdateRoomName.internalBinaryWrite(message.event.updateRoomName, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.MarkUserAbsent markUserAbsent = 6; */
        if (message.event.oneofKind === "markUserAbsent")
            RoomEvent_MarkUserAbsent.internalBinaryWrite(message.event.markUserAbsent, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.MarkUserPresent markUserPresent = 7; */
        if (message.event.oneofKind === "markUserPresent")
            RoomEvent_MarkUserPresent.internalBinaryWrite(message.event.markUserPresent, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.Undo undo = 8; */
        if (message.event.oneofKind === "undo")
            RoomEvent_Undo.internalBinaryWrite(message.event.undo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent.Redo redo = 9; */
        if (message.event.oneofKind === "redo")
            RoomEvent_Redo.internalBinaryWrite(message.event.redo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent
 */
export const RoomEvent = new RoomEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_AddUser$Type extends MessageType<RoomEvent_AddUser> {
    constructor() {
        super("meetinglineup.RoomEvent.AddUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "order", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_AddUser>): RoomEvent_AddUser {
        const message = { userId: "", name: "", order: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_AddUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_AddUser): RoomEvent_AddUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double order */ 3:
                    message.order = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_AddUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double order = 3; */
        if (message.order !== 0)
            writer.tag(3, WireType.Bit64).double(message.order);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.AddUser
 */
export const RoomEvent_AddUser = new RoomEvent_AddUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_RemoveUser$Type extends MessageType<RoomEvent_RemoveUser> {
    constructor() {
        super("meetinglineup.RoomEvent.RemoveUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_RemoveUser>): RoomEvent_RemoveUser {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_RemoveUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_RemoveUser): RoomEvent_RemoveUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_RemoveUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.RemoveUser
 */
export const RoomEvent_RemoveUser = new RoomEvent_RemoveUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_ReorderUser$Type extends MessageType<RoomEvent_ReorderUser> {
    constructor() {
        super("meetinglineup.RoomEvent.ReorderUser", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "order", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_ReorderUser>): RoomEvent_ReorderUser {
        const message = { userId: "", order: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_ReorderUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_ReorderUser): RoomEvent_ReorderUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* double order */ 2:
                    message.order = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_ReorderUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* double order = 2; */
        if (message.order !== 0)
            writer.tag(2, WireType.Bit64).double(message.order);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.ReorderUser
 */
export const RoomEvent_ReorderUser = new RoomEvent_ReorderUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_UpdateUserName$Type extends MessageType<RoomEvent_UpdateUserName> {
    constructor() {
        super("meetinglineup.RoomEvent.UpdateUserName", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_UpdateUserName>): RoomEvent_UpdateUserName {
        const message = { userId: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_UpdateUserName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_UpdateUserName): RoomEvent_UpdateUserName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_UpdateUserName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.UpdateUserName
 */
export const RoomEvent_UpdateUserName = new RoomEvent_UpdateUserName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_UpdateRoomName$Type extends MessageType<RoomEvent_UpdateRoomName> {
    constructor() {
        super("meetinglineup.RoomEvent.UpdateRoomName", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_UpdateRoomName>): RoomEvent_UpdateRoomName {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_UpdateRoomName>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_UpdateRoomName): RoomEvent_UpdateRoomName {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_UpdateRoomName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.UpdateRoomName
 */
export const RoomEvent_UpdateRoomName = new RoomEvent_UpdateRoomName$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_MarkUserAbsent$Type extends MessageType<RoomEvent_MarkUserAbsent> {
    constructor() {
        super("meetinglineup.RoomEvent.MarkUserAbsent", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_MarkUserAbsent>): RoomEvent_MarkUserAbsent {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_MarkUserAbsent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_MarkUserAbsent): RoomEvent_MarkUserAbsent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_MarkUserAbsent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.MarkUserAbsent
 */
export const RoomEvent_MarkUserAbsent = new RoomEvent_MarkUserAbsent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_MarkUserPresent$Type extends MessageType<RoomEvent_MarkUserPresent> {
    constructor() {
        super("meetinglineup.RoomEvent.MarkUserPresent", [
            { no: 1, name: "user_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_MarkUserPresent>): RoomEvent_MarkUserPresent {
        const message = { userId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_MarkUserPresent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_MarkUserPresent): RoomEvent_MarkUserPresent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string user_id */ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_MarkUserPresent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string user_id = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.MarkUserPresent
 */
export const RoomEvent_MarkUserPresent = new RoomEvent_MarkUserPresent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_Undo$Type extends MessageType<RoomEvent_Undo> {
    constructor() {
        super("meetinglineup.RoomEvent.Undo", [
            { no: 1, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_Undo>): RoomEvent_Undo {
        const message = { eventId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_Undo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_Undo): RoomEvent_Undo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string event_id */ 1:
                    message.eventId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_Undo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string event_id = 1; */
        if (message.eventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.Undo
 */
export const RoomEvent_Undo = new RoomEvent_Undo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEvent_Redo$Type extends MessageType<RoomEvent_Redo> {
    constructor() {
        super("meetinglineup.RoomEvent.Redo", [
            { no: 1, name: "event_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RoomEvent_Redo>): RoomEvent_Redo {
        const message = { eventId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEvent_Redo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEvent_Redo): RoomEvent_Redo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string event_id */ 1:
                    message.eventId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEvent_Redo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string event_id = 1; */
        if (message.eventId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eventId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEvent.Redo
 */
export const RoomEvent_Redo = new RoomEvent_Redo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EventMetadata$Type extends MessageType<EventMetadata> {
    constructor() {
        super("meetinglineup.EventMetadata", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EventMetadata>): EventMetadata {
        const message = { id: "", createdAt: 0n, sessionId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EventMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EventMetadata): EventMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* uint64 created_at */ 2:
                    message.createdAt = reader.uint64().toBigInt();
                    break;
                case /* string session_id */ 3:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EventMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* uint64 created_at = 2; */
        if (message.createdAt !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.createdAt);
        /* string session_id = 3; */
        if (message.sessionId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.EventMetadata
 */
export const EventMetadata = new EventMetadata$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoomEventWithMetadata$Type extends MessageType<RoomEventWithMetadata> {
    constructor() {
        super("meetinglineup.RoomEventWithMetadata", [
            { no: 1, name: "metadata", kind: "message", T: () => EventMetadata },
            { no: 2, name: "event", kind: "message", T: () => RoomEvent }
        ]);
    }
    create(value?: PartialMessage<RoomEventWithMetadata>): RoomEventWithMetadata {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoomEventWithMetadata>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoomEventWithMetadata): RoomEventWithMetadata {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* meetinglineup.EventMetadata metadata */ 1:
                    message.metadata = EventMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);
                    break;
                case /* meetinglineup.RoomEvent event */ 2:
                    message.event = RoomEvent.internalBinaryRead(reader, reader.uint32(), options, message.event);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoomEventWithMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* meetinglineup.EventMetadata metadata = 1; */
        if (message.metadata)
            EventMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* meetinglineup.RoomEvent event = 2; */
        if (message.event)
            RoomEvent.internalBinaryWrite(message.event, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message meetinglineup.RoomEventWithMetadata
 */
export const RoomEventWithMetadata = new RoomEventWithMetadata$Type();
